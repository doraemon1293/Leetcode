from collections import defaultdict, deque


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        N = len(graph)
        d = defaultdict(list)
        for init_node in initial:
            visited = set(initial)
            q = deque([init_node])
            while q:
                node = q.popleft()
                for n_node in range(N):
                    if graph[node][n_node] and n_node not in visited:
                        d[n_node].append(init_node)
                        visited.add(n_node)
                        q.append(n_node)
        count = defaultdict(int)
        ans = float("inf")
        maxi = -float("inf")
        for node in d:
            if len(d[node]) == 1:
                init_node = d[node][0]
                count[init_node] += 1
                if count[init_node] > maxi:
                    maxi = count[init_node]
                    ans = init_node
                elif count[init_node] == maxi:
                    ans = min(ans, init_node)
        if ans==float("inf"):
            return min(initial)
        else:
            return ans