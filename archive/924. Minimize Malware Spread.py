from collections import defaultdict, deque


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        M, N = len(graph), len(graph[0])
        initial_set = set(initial)
        nbr = defaultdict(set)
        for i in range(M):
            for j in range(N):
                if graph[i][j]:
                    nbr[i].add(j)

        visited = set()
        size = defaultdict(int)
        for initial_node in initial:
            if initial_node not in visited:
                reach_other_initial_node = False
                visited.add(initial_node)
                q = deque([initial_node])
                cur_size = 1
                while q:
                    node = q.popleft()
                    for n_node in nbr[node]:
                        if n_node not in visited:
                            if n_node in initial_set:
                                reach_other_initial_node = True
                            visited.add(n_node)
                            q.append(n_node)
                            cur_size += 1
                if not reach_other_initial_node:
                    size[initial_node] = cur_size
        ans = max([(size[initial_node], -initial_node) for initial_node in initial])
        return -ans[1]


graph = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]]
initial = [3, 1]
print(Solution().minMalwareSpread(graph, initial))
